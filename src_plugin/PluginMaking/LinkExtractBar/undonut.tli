// Created by Microsoft (R) C/C++ Compiler Version 15.00.21022.08 (b72b4f09).
//
// e:\proj\und\src_plugin\pluginmaking\linkextractbar\debug\undonut.tli
//
// Wrapper implementations for Win32 type library C:\\ut\unDonut\\unDonut.exe
// compiler-generated file created 07/07/08 at 02:28:34 - DO NOT EDIT!

#pragma once

//
// dispinterface IDonutPEvents wrapper method implementations
//

inline HRESULT IDonutPEvents::DocumentComplete ( long nIndex, IDispatch * pDisp, _bstr_t bstrURL ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x0009\x0008", nIndex, pDisp, (BSTR)bstrURL);
    return _result;
}

//
// interface IAPI wrapper method implementations
//

inline HRESULT IAPI::Close ( int nIndex ) {
    HRESULT _hr = raw_Close(nIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IAPI::GetDocumentObject ( int nIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetDocumentObject(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IAPI::GetWindowObject ( int nIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetWindowObject(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IAPI::GetWebBrowserObject ( int nIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetWebBrowserObject(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IAPI::GetTabIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_TabIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAPI::PutTabIndex ( long pVal ) {
    HRESULT _hr = put_TabIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IAPI::GetTabCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetTabCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IAPI::MoveToTab ( unsigned short wBefor, unsigned short wAfter ) {
    HRESULT _hr = raw_MoveToTab(wBefor, wAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IAPI::NewWindow ( _bstr_t bstrURL, long bActive ) {
    long _result = 0;
    HRESULT _hr = raw_NewWindow(bstrURL, bActive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IAPI::MessageBox ( _bstr_t bstrText, _bstr_t bstrCaption, unsigned int uType ) {
    long _result = 0;
    HRESULT _hr = raw_MessageBox(bstrText, bstrCaption, uType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IAPI::ShowPanelBar ( ) {
    HRESULT _hr = raw_ShowPanelBar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IAPI::GetPanelDocumentObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetPanelDocumentObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IAPI::GetPanelWindowObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetPanelWindowObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IAPI::GetPanelWebBrowserObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetPanelWebBrowserObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IAPI::GetTabState ( int nIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetTabState(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAPI2 wrapper method implementations
//

inline HRESULT IAPI2::ExecuteCommand ( int nCommand ) {
    HRESULT _hr = raw_ExecuteCommand(nCommand);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IAPI2::GetSearchText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSearchText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IAPI2::SetSearchText ( _bstr_t bstrText ) {
    HRESULT _hr = raw_SetSearchText(bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IAPI2::GetAddressText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAddressText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IAPI2::SetAddressText ( _bstr_t bstrText ) {
    HRESULT _hr = raw_SetAddressText(bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IAPI2::GetExtendedTabState ( int nIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetExtendedTabState(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IAPI2::SetExtendedTabState ( int nIndex, long nState ) {
    HRESULT _hr = raw_SetExtendedTabState(nIndex, nState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IAPI2::GetKeyState ( int nKey ) {
    long _result = 0;
    HRESULT _hr = raw_GetKeyState(nKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IAPI2::GetProfileInt ( _bstr_t bstrFile, _bstr_t bstrSection, _bstr_t bstrKey, int nDefault ) {
    long _result = 0;
    HRESULT _hr = raw_GetProfileInt(bstrFile, bstrSection, bstrKey, nDefault, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IAPI2::WriteProfileInt ( _bstr_t bstrFile, _bstr_t bstrSection, _bstr_t bstrKey, int nValue ) {
    HRESULT _hr = raw_WriteProfileInt(bstrFile, bstrSection, bstrKey, nValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IAPI2::GetProfileString ( _bstr_t bstrFile, _bstr_t bstrSection, _bstr_t bstrKey, _bstr_t bstrDefault ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetProfileString(bstrFile, bstrSection, bstrKey, bstrDefault, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IAPI2::WriteProfileString ( _bstr_t bstrFile, _bstr_t bstrSection, _bstr_t bstrKey, _bstr_t bstrText ) {
    HRESULT _hr = raw_WriteProfileString(bstrFile, bstrSection, bstrKey, bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IAPI2::GetScriptFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetScriptFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAPI2::GetCSSFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCSSFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAPI2::GetBaseFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBaseFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAPI2::GetExePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetExePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IAPI2::SetStyleSheet ( int nIndex, _bstr_t bstrStyleSheet, long bOff ) {
    HRESULT _hr = raw_SetStyleSheet(nIndex, bstrStyleSheet, bOff);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAPI3 wrapper method implementations
//

inline HRESULT IAPI3::SaveGroup ( _bstr_t bstrGroupFile ) {
    HRESULT _hr = raw_SaveGroup(bstrGroupFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAPI3::LoadGroup ( _bstr_t bstrGroupFile, long bClose ) {
    HRESULT _hr = raw_LoadGroup(bstrGroupFile, bClose);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IAPI3::EncryptString ( _bstr_t bstrString, _bstr_t bstrPass ) {
    BSTR _result = 0;
    HRESULT _hr = raw_EncryptString(bstrString, bstrPass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAPI3::DecryptString ( _bstr_t bstrString ) {
    BSTR _result = 0;
    HRESULT _hr = raw_DecryptString(bstrString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IAPI3::InputBox ( _bstr_t bstrTitle, _bstr_t bstrDescript, _bstr_t bstrDefault, int nFlag ) {
    long _result = 0;
    HRESULT _hr = raw_InputBox(bstrTitle, bstrDescript, bstrDefault, nFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IAPI3::NewWindow3 ( _bstr_t bstrURL, long bActive, long ExStyle, int * pHistInfo ) {
    long _result = 0;
    HRESULT _hr = raw_NewWindow3(bstrURL, bActive, ExStyle, pHistInfo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IAPI3::AddGroupItem ( _bstr_t bstrGroupFile, int nIndex ) {
    long _result = 0;
    HRESULT _hr = raw_AddGroupItem(bstrGroupFile, nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IAPI3::DeleteGroupItem ( _bstr_t bstrGroupFile, int nIndex ) {
    long _result = 0;
    HRESULT _hr = raw_DeleteGroupItem(bstrGroupFile, nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAPI4 wrapper method implementations
//

inline long IAPI4::GetHWND ( long nType ) {
    long _result = 0;
    HRESULT _hr = raw_GetHWND(nType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
